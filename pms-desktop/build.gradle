plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'org.beryx.runtime' version '1.3.0'
    id "com.github.johnrengelman.shadow" version "5.1.0"
}

repositories {
    mavenCentral()
}

// this vm argument is important to make the "controlsfx" dependency work
applicationDefaultJvmArgs = ["--add-exports=javafx.base/com.sun.javafx.event=ALL-UNNAMED"]


dependencies {
    compile project(':pms-core')
    compile group: 'com.google.guava', name: 'guava', version: '27.1-jre'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.8'

    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'org.controlsfx', name: 'controlsfx', version: '11.0.0'

    runtime 'org.kordamp.ikonli:ikonli-javafx:11.3.4'
    runtime 'org.kordamp.ikonli:ikonli-fontawesome-pack:11.3.4'
    runtime 'org.kordamp.ikonli:ikonli-dashicons-pack:11.3.4'

    compile group: 'commons-io', name: 'commons-io', version: '2.5'

    compile "org.openjfx:javafx-graphics:11.0.1:win"
    compile "org.openjfx:javafx-graphics:11.0.1:linux"
    compile "org.openjfx:javafx-graphics:11.0.1:mac"

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

shadowJar {
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': 'de.hfu.pms.Main'
    }
}

javafx {
    version = "12.0.2"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.base', 'javafx.swing' ]
}

mainClassName = 'de.hfu.pms.Main'

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    jpackage {
        // jpackageHome = '/usr/lib/jvm/jdk14'
        if(org.gradle.internal.os.OperatingSystem.current().windows) {
            installerType = 'msi'
            // imageOptions = ['--win-console']
            installerOptions = ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'de.hfu.pms.Main'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
